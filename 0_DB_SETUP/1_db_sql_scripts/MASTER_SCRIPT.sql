--------------------------------------------------------
-- OLTP BEGINS
--------------------------------------------------------

--------------------------------------------------------
-- Schema OLTP
--------------------------------------------------------
CREATE SCHEMA "OLTP";
SET SCHEMA 'OLTP';

--------------------------------------------------------
-- Table "OLTP".OLTP_CUSTOMERS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_CUSTOMERS
(    
    CUSTOMER_ID VARCHAR(50), 
    CUSTOMER_UNIQUE_ID VARCHAR(50), 
    CUSTOMER_ZIPCODE VARCHAR(5), 
    CUSTOMER_CITY VARCHAR(50), 
    CUSTOMER_STATE VARCHAR(5)
);
--------------------------------------------------------
-- Table "OLTP".OLTP_GEOLOCALIZATIONS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_GEOLOCALIZATIONS
(    
    GEO_ZIPCODE VARCHAR(5), 
    GEO_LAT DOUBLE PRECISION, 
    GEO_LONG DOUBLE PRECISION, 
    GEO_CITY VARCHAR(50),
    GEO_STATE VARCHAR(5)
);
--------------------------------------------------------
-- Table "OLTP".OLTP_ORDER_ITEMS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_ORDER_ITEMS
(    
    ORDER_ID VARCHAR(50), 
    ORDER_ITEM_QTA INTEGER, 
    PRODUCT_ID VARCHAR(50),
    SELLER_ID VARCHAR(50),
    PRICE REAL,
    FREIGHT_VALUE REAL
);
--------------------------------------------------------
-- Table "OLTP".OLTP_ORDER_PAYMENTS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_ORDER_PAYMENTS
(    
    ORDER_ID VARCHAR(50), 
    PAYMENT_SEQUENTIAL INTEGER, 
    PAYMENT_TYPE VARCHAR(20),
    PAYMENT_INSTALLMENTS INTEGER,
    PAYMENT_VALUE REAL
);
--------------------------------------------------------
-- Table "OLTP".OLTP_ORDER_REVIEWS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_ORDER_REVIEWS
(    
    REVIEW_ID VARCHAR(50),
    ORDER_ID VARCHAR(50),
    REVIEW_SCORE INTEGER, 
    REVIEW_TITLE TEXT,
    REVIEW_CONTENT TEXT,
    REVIEW_CREATION_TIMESTAMP TIMESTAMP,
    REVIEW_ANSWER_TIMESTAMP TIMESTAMP
);
--------------------------------------------------------
-- Table "OLTP".OLTP_ORDERS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_ORDERS
(    
    ORDER_ID VARCHAR(50),
    CUSTOMER_ID VARCHAR(50), 
    ORDER_STATUS VARCHAR(30),
    ORDER_PURCHASE_TIMESTAMP TIMESTAMP,
    ORDER_APPROVAL_TIMESTAMP TIMESTAMP,
    ORDER_DELIVERED_CARRIER_TIMESTAMP TIMESTAMP,
    ORDER_DELIVERED_CUSTOMER_TIMESTAMP TIMESTAMP,
    ORDER_ESTIMATED_DELIVERY_TIMESTAMP TIMESTAMP
);
--------------------------------------------------------
-- Table "OLTP".OLTP_PRODUCTS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_PRODUCTS
(    
    PRODUCT_ID VARCHAR(50),
    PRODUCT_CATEGORY_NAME VARCHAR(100), 
    PRODUCT_NAME_LENGHT INTEGER,
    DESCRIPTION_LENGHT INTEGER,
    PRODUCT_PHOTO_QTA INTEGER,
    PRODUCT_WEIGHT_GRAMS INTEGER,
    PRODUCT_LENGHT_CM INTEGER,
    PRODUCT_HEIGHT_CM INTEGER,
    PRODUCT_WIDTH_CM INTEGER
);

--------------------------------------------------------
-- Table "OLTP".OLTP_SELLERS
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_SELLERS
(
    SELLER_ID VARCHAR(50),
    SELLER_ZIPCODE VARCHAR(5),
    SELLER_CITY VARCHAR(50), 
    SELLER_STATE VARCHAR(5)
);

--------------------------------------------------------
-- Table "OLTP".OLTP_CATEGORIES_TRANSLATION
--------------------------------------------------------
CREATE TABLE "OLTP".OLTP_CATEGORIES_TRANSLATION
(    
    PRODUCT_CATEGORY_NAME VARCHAR(100),
    PRODUCT_CATEGORY_NAME_ENGLISH VARCHAR(100)
);


--------------------------------------------------------
-- STAGING BEGINS
--------------------------------------------------------



--------------------------------------------------------
-- Schema STAGING
--------------------------------------------------------
CREATE SCHEMA "STAGING";
SET SCHEMA 'STAGING';

--------------------------------------------------------
-- Table "STAGING".DWHS_D_CUSTOMERS
--------------------------------------------------------
CREATE TABLE "STAGING".DWHS_D_CUSTOMERS
(    
    CUSTOMER_UNIQUE_ID VARCHAR(50), 
    CUSTOMER_ZIPCODE VARCHAR(5), 
    CUSTOMER_CITY VARCHAR(50), 
    CUSTOMER_STATE VARCHAR(5),
    CUSTOMER_GEO_LAT DOUBLE PRECISION, 
    CUSTOMER_GEO_LONG DOUBLE PRECISION,
    UPD_FLAG VARCHAR(1)
);
--------------------------------------------------------
-- Table "STAGING".DWHS_D_PAYMENTS
--------------------------------------------------------
CREATE TABLE "STAGING".DWHS_D_ORDER_PAYMENTS
(    
    ORDER_ID VARCHAR(50), 
    PAYMENT_SEQUENTIAL INTEGER, 
    PAYMENT_TYPE VARCHAR(20),
    PAYMENT_INSTALLMENTS INTEGER,
    PAYMENT_VALUE REAL,
    UPD_FLAG VARCHAR(1)
);
--------------------------------------------------------
-- Table "STAGING".DWHS_F_ORDERS
--------------------------------------------------------
CREATE TABLE "STAGING".DWHS_F_ORDERS
(    
    ORDER_ID VARCHAR(50),
    CUSTOMER_UNIQUE_ID VARCHAR(50), 
    PRODUCT_ID VARCHAR(50),
    SELLER_ID VARCHAR(50),
    ORDER_ITEM_QTA INTEGER, 
    PRICE REAL,
    FREIGHT_VALUE REAL,
    ORDER_STATUS VARCHAR(30),
    REVIEW_SCORE INTEGER, 
    ORDER_PURCHASE_TIMESTAMP TIMESTAMP,
    ORDER_APPROVAL_TIMESTAMP TIMESTAMP,
    ORDER_DELIVERED_CARRIER_TIMESTAMP TIMESTAMP,
    ORDER_DELIVERED_CUSTOMER_TIMESTAMP TIMESTAMP,
    ORDER_ESTIMATED_DELIVERY_TIMESTAMP TIMESTAMP,
    UPD_FLAG VARCHAR(1)
);
--------------------------------------------------------
-- Table "STAGING".DWHS_D_PRODUCTS
--------------------------------------------------------
CREATE TABLE "STAGING".DWHS_D_PRODUCTS
(    
    PRODUCT_ID VARCHAR(50),
    PRODUCT_CATEGORY_NAME VARCHAR(100), 
    PRODUCT_CATEGORY_NAME_ENGLISH VARCHAR(100),
    PRODUCT_NAME_LENGHT INTEGER,
    DESCRIPTION_LENGHT INTEGER,
    PRODUCT_PHOTO_QTA INTEGER,
    PRODUCT_WEIGHT_GRAMS INTEGER,
    PRODUCT_LENGHT_CM INTEGER,
    PRODUCT_HEIGHT_CM INTEGER,
    PRODUCT_WIDTH_CM INTEGER,
    UPD_FLAG VARCHAR(1)
);
--------------------------------------------------------
-- Table "STAGING".DWHS_D_SELLERS
--------------------------------------------------------
CREATE TABLE "STAGING".DWHS_D_SELLERS
(
    SELLER_ID VARCHAR(50),
    SELLER_ZIPCODE VARCHAR(5),
    SELLER_CITY VARCHAR(50), 
    SELLER_STATE VARCHAR(5),
    SELLER_GEO_LAT DOUBLE PRECISION, 
    SELLER_GEO_LONG DOUBLE PRECISION, 
    UPD_FLAG VARCHAR(1)
);

--------------------------------------------------------
-- Table "STAGING".ERROR_D_CUSTOMERS
--------------------------------------------------------
CREATE TABLE "STAGING".ERROR_D_CUSTOMERS
(    
    CUSTOMER_UNIQUE_ID VARCHAR(50), 
    CUSTOMER_ZIPCODE VARCHAR(5), 
    CUSTOMER_CITY VARCHAR(50), 
    CUSTOMER_STATE VARCHAR(5),
    CUSTOMER_GEO_LAT DOUBLE PRECISION, 
    CUSTOMER_GEO_LONG DOUBLE PRECISION,
    LOGT TIMESTAMP
);
--------------------------------------------------------
-- Table "STAGING".ERROR_ORDER_PAYMENTS
--------------------------------------------------------
CREATE TABLE "STAGING".ERROR_D_ORDER_PAYMENTS
(    
    ORDER_ID VARCHAR(50), 
    PAYMENT_SEQUENTIAL INTEGER, 
    PAYMENT_TYPE VARCHAR(20),
    PAYMENT_INSTALLMENTS INTEGER,
    PAYMENT_VALUE REAL,
    LOGT TIMESTAMP
);
--------------------------------------------------------
-- Table "STAGING".ERROR_F_ORDERS
--------------------------------------------------------
CREATE TABLE "STAGING".ERROR_F_ORDERS
(    
    ORDER_ID VARCHAR(50),
    CUSTOMER_UNIQUE_ID VARCHAR(50), 
    PRODUCT_ID VARCHAR(50),
    SELLER_ID VARCHAR(50),
    ORDER_ITEM_QTA INTEGER, 
    PRICE REAL,
    FREIGHT_VALUE REAL,
    ORDER_STATUS VARCHAR(30),
    REVIEW_SCORE INTEGER, 
    ORDER_PURCHASE_TIMESTAMP TIMESTAMP,
    ORDER_APPROVAL_TIMESTAMP TIMESTAMP,
    ORDER_DELIVERED_CARRIER_TIMESTAMP TIMESTAMP,
    ORDER_DELIVERED_CUSTOMER_TIMESTAMP TIMESTAMP,
    ORDER_ESTIMATED_DELIVERY_TIMESTAMP TIMESTAMP,
    LOGT TIMESTAMP
);
--------------------------------------------------------
-- Table "STAGING".ERROR_D_PRODUCTS
--------------------------------------------------------
CREATE TABLE "STAGING".ERROR_D_PRODUCTS
(    
    PRODUCT_ID VARCHAR(50),
    PRODUCT_CATEGORY_NAME VARCHAR(100), 
    PRODUCT_CATEGORY_NAME_ENGLISH VARCHAR(100),
    PRODUCT_NAME_LENGHT INTEGER,
    DESCRIPTION_LENGHT INTEGER,
    PRODUCT_PHOTO_QTA INTEGER,
    PRODUCT_WEIGHT_GRAMS INTEGER,
    PRODUCT_LENGHT_CM INTEGER,
    PRODUCT_HEIGHT_CM INTEGER,
    PRODUCT_WIDTH_CM INTEGER,
    LOGT TIMESTAMP
);
--------------------------------------------------------
-- Table "STAGING".ERROR_D_SELLERS
--------------------------------------------------------
CREATE TABLE "STAGING".ERROR_D_SELLERS
(
    SELLER_ID VARCHAR(50),
    SELLER_ZIPCODE VARCHAR(5),
    SELLER_CITY VARCHAR(50), 
    SELLER_STATE VARCHAR(5),
    SELLER_GEO_LAT DOUBLE PRECISION, 
    SELLER_GEO_LONG DOUBLE PRECISION, 
    LOGT TIMESTAMP
);



--------------------------------------------------------
-- DWH BEGNS
--------------------------------------------------------



--------------------------------------------------------
-- Schema DWH
--------------------------------------------------------
CREATE SCHEMA "DWH";
SET SCHEMA 'DWH';

--------------------------------------------------------
-- Table "DWH".D_CUSTOMERS
--------------------------------------------------------
CREATE SEQUENCE "DWH".D_CUSTOMERS_SEQ 
INCREMENT 1
MINVALUE 1
START 1
CACHE 20;

CREATE TABLE "DWH".D_CUSTOMERS
(    
    CUSTOMER_KEY BIGINT NOT NULL DEFAULT nextval('"DWH".D_CUSTOMERS_SEQ'),
    CUSTOMER_UNIQUE_ID VARCHAR(50) NOT NULL, 
    CUSTOMER_ZIPCODE VARCHAR(5) NOT NULL, 
    CUSTOMER_CITY VARCHAR(50) NOT NULL, 
    CUSTOMER_STATE VARCHAR(5) NOT NULL,
    CUSTOMER_GEO_LAT DOUBLE PRECISION NOT NULL, 
    CUSTOMER_GEO_LONG DOUBLE PRECISION NOT NULL,
    CUSTOMER_DATE_FROM TIMESTAMP,
    CUSTOMER_DATE_TO TIMESTAMP,
    CONSTRAINT "D_CUSTOMERS_PK" PRIMARY KEY (CUSTOMER_KEY)
);
--------------------------------------------------------
-- Table "DWH".D_PAYMENTS
--------------------------------------------------------
CREATE SEQUENCE "DWH".D_ORDER_PAYMENTS_SEQ
INCREMENT 1
MINVALUE 1
START 1
CACHE 20;

CREATE TABLE "DWH".D_ORDER_PAYMENTS
(    
    PAYMENT_KEY BIGINT NOT NULL DEFAULT nextval('"DWH".D_ORDER_PAYMENTS_SEQ'),
    ORDER_ID VARCHAR(50) NOT NULL, 
    PAYMENT_SEQUENTIAL SMALLINT NOT NULL, 
    PAYMENT_TYPE VARCHAR(20) NOT NULL,
    PAYMENT_INSTALLMENTS SMALLINT NOT NULL,
    PAYMENT_VALUE REAL NOT NULL,
    PAYMENTS_DATE_FROM TIMESTAMP,
    PAYMENTS_DATE_TO TIMESTAMP,
    CONSTRAINT "D_ORDER_PAYMENTS_PK" PRIMARY KEY (PAYMENT_KEY) 
);
--------------------------------------------------------
-- Table "DWH".D_PRODUCTS
--------------------------------------------------------
CREATE SEQUENCE "DWH".D_PRODUCTS_SEQ
INCREMENT 1
MINVALUE 1
START 1
CACHE 20;

CREATE TABLE "DWH".D_PRODUCTS
(    
    PRODUCT_KEY BIGINT NOT NULL DEFAULT nextval('"DWH".D_PRODUCTS_SEQ'),
    PRODUCT_ID VARCHAR(50) NOT NULL,
    PRODUCT_CATEGORY_NAME VARCHAR(100) NOT NULL, 
    PRODUCT_CATEGORY_NAME_ENGLISH VARCHAR(100) NOT NULL,
    PRODUCT_NAME_LENGHT SMALLINT NOT NULL,
    DESCRIPTION_LENGHT INTEGER NOT NULL,
    PRODUCT_PHOTO_QTA SMALLINT NOT NULL,
    PRODUCT_WEIGHT_GRAMS SMALLINT NOT NULL,
    PRODUCT_LENGHT_CM SMALLINT NOT NULL,
    PRODUCT_HEIGHT_CM SMALLINT NOT NULL,
    PRODUCT_WIDTH_CM SMALLINT NOT NULL,
    PRODUCT_DATE_FROM TIMESTAMP,
    PRODUCT_DATE_TO TIMESTAMP,
    CONSTRAINT "D_PRODUCTS_PK" PRIMARY KEY (PRODUCT_KEY) 
);
--------------------------------------------------------
-- Table "DWH".D_SELLERS
--------------------------------------------------------
CREATE SEQUENCE "DWH".D_SELLERS_SEQ
INCREMENT 1
MINVALUE 1
START 1
CACHE 20;

CREATE TABLE "DWH".D_SELLERS
(
    SELLER_KEY BIGINT NOT NULL DEFAULT nextval('"DWH".D_SELLERS_SEQ'),
    SELLER_ID VARCHAR(50) NOT NULL,
    SELLER_ZIPCODE VARCHAR(5) NOT NULL,
    SELLER_CITY VARCHAR(50) NOT NULL, 
    SELLER_STATE VARCHAR(5) NOT NULL,
    SELLER_GEO_LAT DOUBLE PRECISION NOT NULL, 
    SELLER_GEO_LONG DOUBLE PRECISION NOT NULL, 
    SELLER_DATE_FROM TIMESTAMP,
    SELLER_DATE_TO TIMESTAMP,
    CONSTRAINT "D_SELLERS_PK" PRIMARY KEY (SELLER_KEY) 
);
--------------------------------------------------------
-- Table "DWH".F_ORDERS
--------------------------------------------------------
CREATE TABLE "DWH".F_ORDERS
(    
    ORDER_ID VARCHAR(50) NOT NULL,
    CUSTOMER_KEY BIGINT NOT NULL,  
    PRODUCT_KEY BIGINT NOT NULL,
    SELLER_KEY BIGINT NOT NULL,
    PAYMENT_KEY BIGINT NOT NULL,
    ORDER_ITEM_QTA SMALLINT NOT NULL, 
    PRICE REAL NOT NULL,
    FREIGHT_VALUE REAL NOT NULL,
    ORDER_STATUS VARCHAR(30) NOT NULL,
    REVIEW_SCORE SMALLINT NOT NULL,  
    ORDER_PURCHASE_TIMESTAMP TIMESTAMP NOT NULL,
    ORDER_APPROVAL_TIMESTAMP TIMESTAMP NOT NULL,
    ORDER_DELIVERED_CARRIER_TIMESTAMP TIMESTAMP NOT NULL,
    ORDER_DELIVERED_CUSTOMER_TIMESTAMP TIMESTAMP NOT NULL,
    ORDER_ESTIMATED_DELIVERY_TIMESTAMP TIMESTAMP NOT NULL
);

--------------------------------------------------------
-- FOREIGN KEY Constraints
--------------------------------------------------------
ALTER TABLE "DWH".F_ORDERS 
ADD CONSTRAINT "F_ORDERS_D_CUSTOMERS_FK" FOREIGN KEY (CUSTOMER_KEY)
REFERENCES "DWH".D_CUSTOMERS (CUSTOMER_KEY)
MATCH SIMPLE 
ON UPDATE NO ACTION 
ON DELETE NO ACTION;

ALTER TABLE "DWH".F_ORDERS 
ADD CONSTRAINT "F_ORDERS_D_ORDER_PAYMENTS_FK" FOREIGN KEY (PAYMENT_KEY)
REFERENCES "DWH".D_ORDER_PAYMENTS (PAYMENT_KEY)
MATCH SIMPLE 
ON UPDATE NO ACTION 
ON DELETE NO ACTION;


ALTER TABLE "DWH".F_ORDERS 
ADD CONSTRAINT "F_ORDERS_D_PRODUCTS_FK" FOREIGN KEY (PRODUCT_KEY)
REFERENCES "DWH".D_PRODUCTS (PRODUCT_KEY)
MATCH SIMPLE 
ON UPDATE NO ACTION 
ON DELETE NO ACTION;

ALTER TABLE "DWH".F_ORDERS 
ADD CONSTRAINT "F_ORDERS_D_SELLERS_FK" FOREIGN KEY (SELLER_KEY)
REFERENCES "DWH".D_SELLERS (SELLER_KEY)
MATCH SIMPLE 
ON UPDATE NO ACTION 
ON DELETE NO ACTION;

--------------------------------------------------------
-- INDEXING JOINS
--------------------------------------------------------
CREATE INDEX "FKI_F_ORDERS_D_CUSTOMERS_FK"
ON "DWH".F_ORDERS
USING btree (CUSTOMER_KEY); 

CREATE INDEX "FKI_F_ORDERS_D_ORDER_PAYMENTS_FK"
ON "DWH".F_ORDERS
USING btree (PAYMENT_KEY); 

CREATE INDEX "FKI_F_ORDERS_D_PRODUCTS_FK"
ON "DWH".F_ORDERS
USING btree (PRODUCT_KEY); 

CREATE INDEX "FKI_F_ORDERS_D_SELLERS_FK"
ON "DWH".F_ORDERS
USING btree (SELLER_KEY); 

--------------------------------------------------------
-- RANGE PARTITIONING ON PURCHASE DATE
--------------------------------------------------------
CREATE TABLE "DWH".F_ORDERS_2016 (
CHECK (ORDER_PURCHASE_TIMESTAMP < DATE '2017-01-01')
) INHERITS ("DWH".F_ORDERS);

CREATE TABLE "DWH".F_ORDERS_2017 (
CHECK (ORDER_PURCHASE_TIMESTAMP >= DATE '2017-01-01' AND ORDER_PURCHASE_TIMESTAMP < DATE '2018-01-01')
) INHERITS ("DWH".F_ORDERS);

CREATE TABLE "DWH".F_ORDERS_2018 (
CHECK (ORDER_PURCHASE_TIMESTAMP >= DATE '2018-01-01')
) INHERITS ("DWH".F_ORDERS);

CREATE RULE F_ORDERS_2016_INSERT AS
ON INSERT TO "DWH".F_ORDERS WHERE
(ORDER_PURCHASE_TIMESTAMP < DATE '2017-01-01')
DO INSTEAD
INSERT INTO "DWH".F_ORDERS_2016 VALUES (NEW.*);

CREATE RULE F_ORDERS_2017_INSERT AS
ON INSERT TO "DWH".F_ORDERS WHERE
(ORDER_PURCHASE_TIMESTAMP >= DATE '2017-01-01' AND ORDER_PURCHASE_TIMESTAMP < DATE '2018-01-01')
DO INSTEAD
INSERT INTO "DWH".F_ORDERS_2017 VALUES (NEW.*);

CREATE RULE F_ORDERS_2018_INSERT AS
ON INSERT TO "DWH".F_ORDERS WHERE
(ORDER_PURCHASE_TIMESTAMP >= DATE '2018-01-01')
DO INSTEAD
INSERT INTO "DWH".F_ORDERS_2018 VALUES (NEW.*);